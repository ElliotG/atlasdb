// -*- groovy -*-
// METABUILD GENERATED metaconf/metaconf.groovy + metaconf/project/make.gradle.tmpl -> atlasdb/atlasdb-shell/make.gradle
apply from: "${rootProject.projectDir}/before.gradle"
sourceSets.main.java.srcDirs=[ file('src/main/java') ]
sourceSets.main.resources.srcDirs=[ file('src/main/resources') ]
sourceSets.test.java.srcDirs=[  ]
sourceSets.test.resources.srcDirs=[  ]
sourceCompatibility = '1.8'
targetCompatibility = '1.8'
configurations.create('test').extendsFrom(configurations.testRuntime)
jar {
  baseName 'atlasdb-shell'
  exclude '.gitkeep'
  doFirst {
    manifest {
      from rootProject.ext.standardManifest
      def jarList = processJarListForManifest(sourceSets.main.compileClasspath)
      if (!jarList.isEmpty()) {
        attributes.put('Class-Path', jarList.join(' '))
      }
    }
  }
  doLast {
    rootProject.ext.pgdevArtifactNames.add(archiveName)
  }
}
task testJar(type: Jar) {
  baseName 'atlasdb-shell-test'
  from sourceSets.test.output
  exclude '.gitkeep'
  ext.is_test = true
  doFirst {
    manifest {
      from rootProject.ext.standardManifest
      def jarList = processJarListForManifest(sourceSets.test.compileClasspath)
      if (!jarList.isEmpty()) {
        attributes.put('Class-Path', jarList.join(' '))
      }
    }
  }
  doLast {
    rootProject.ext.pgdevArtifactNames.add(archiveName)
  }
}
assemble.dependsOn testJar
task mainSourcesZip(type: Zip) {
  baseName 'atlasdb-shell'
  from sourceSets.main.allSource
}
assemble.dependsOn mainSourcesZip
task testSourcesZip(type: Zip) {
  baseName 'atlasdb-shell-test'
  from sourceSets.test.allSource
}
assemble.dependsOn testSourcesZip
dependencies {
  test sourceSets.test.output
  compile(group: 'com.github.rjeschke', name: 'txtmark', version: '0.11', configuration: 'default')
  compile(group: 'com.palantir.opensource', name: 'ptoss-cinch', version: '1.1', configuration: 'default')
  compile(group: 'commons-cli', name: 'commons-cli', version: '1.3.1', configuration: 'default')
  compile(group: 'com.google.code.gson', name: 'gson', version: '2.2.4', configuration: 'default')
  compile(group: 'org.jruby', name: 'jruby-stdlib', version: '1.6.7.2', configuration: 'default')
  compile(group: 'org.jruby', name: 'jruby-core', version: '1.6.7.2', configuration: 'default')
  compile(group: 'org.yaml', name: 'snakeyaml', version: '1.13', configuration: 'default')
  testCompile(group: 'junit', name: 'junit', version: '4.11', configuration: 'default')
  testCompile(project(path: ':atlasdb-impl-shared', configuration: 'test'))
  compile(project(path: ':atlasdb-impl-shared', configuration: 'default'))
  testCompile(project(path: ':atlasdb-rocksdb', configuration: 'test'))
  compile(project(path: ':atlasdb-rocksdb', configuration: 'default'))
  testCompile(project(path: ':atlasdb-cassandra', configuration: 'test'))
  compile(project(path: ':atlasdb-cassandra', configuration: 'default'))
}
configurations.all {
  resolutionStrategy {
    force 'org.apache.thrift:libthrift:0.9.2'
    force 'org.jruby.extras:jaffl:0.5.11'
    force 'org.jruby.jcodings:jcodings:1.0.7'
    force 'org.jruby.extras:jffi:1.0.8'
    force 'org.slf4j:slf4j-api:1.7.6'
    force 'org.xerial.snappy:snappy-java:1.1.1.7'
    force 'org.yaml:snakeyaml:1.13'
    force 'com.google.guava:guava:18.0'
    force 'com.googlecode.json-simple:json-simple:1.1.1'
    force 'commons-cli:commons-cli:1.3.1'
    force 'commons-codec:commons-codec:1.6'
    force 'joda-time:joda-time:2.9.2'
  }
}
apply from: "${rootProject.projectDir}/after.gradle"
